# -*- coding: utf-8 -*-
"""03-02PydanticOuputParser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1crnw-8MqThbFz71Oj8mMPwOL5y3qlbCa
"""

import os

from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import PydanticOutputParser
from langchain_core.messages import AIMessageChunk
from pydantic import BaseModel, Field

from dotenv import load_dotenv
load_dotenv()

llm = ChatOpenAI(temperature=0, model_name="gpt-4o")

with open("data\E-MAIL.txt", "r") as f:
    email_conversation = f.read()

from itertools import chain
from langchain_core.prompts import PromptTemplate
from langchain_teddynote.messages import stream_response

"""# Output Parser를 사용하는 경우"""

class EmailSummary(BaseModel):
    person: str = Field(description="The person who sent the mail")
    email: str = Field(description="Email address of the person who sent the mail")
    subject: str = Field(description="Subject of the mail")
    summary: str = Field(description="Text summarizing the body of the mail")
    date: str = Field(description="Date and time of the meeting mentioned in the body of the mail")
    isspam: bool = Field(description="Whether the mail is spam or not, if spam enter spam and if not spam enter not spam")
    importance: str = Field(description="The importance level of the email: High, Medium, or Low")
    action_required: bool = Field(description="Whether the email requires an action or response")
    attachments: list[str] = Field(default=[], description="List of attachment filenames included in the email")
    tags: list[str] = Field(default=["work", "urgent", "meeting", "report", "personal", "spam"], description="List of user-defined tags for categorization")
    sentiment: str = Field(description="Overall sentiment of the email content: Positive, Negative, or Neutral")

# PydanticOutputParser 생성
parser = PydanticOutputParser(pydantic_object=EmailSummary)

test_instruct = parser.get_format_instructions()

print(test_instruct)

prompt = PromptTemplate.from_template(
    """
You are a helpful assistant. Please answer the following questions in KOREAN.

QUESTION:
{question}

EMAIL CONVERSATION:
{email_conversation}

FORMAT:
{format}
"""
)

# format 에 PydanticOutputParser의 부분 포맷팅(partial) 추가
prompt = prompt.partial(format=parser.get_format_instructions())

chain = prompt | llm | parser

result = chain.invoke(
    {
    "email_conversation": email_conversation,
    "question" : "Extract the main content of the email"
    }
)

print(result)

import json

# JSON 파일로 저장
with open('REPLY-STRUCTED.json', 'w') as json_file:
    json.dump(dict(result), json_file, indent=4)