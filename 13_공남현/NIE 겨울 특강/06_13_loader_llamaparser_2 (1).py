# -*- coding: utf-8 -*-
"""06_13_LOADER_LLAMAPARSER-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NP4rtDkPR7uIVaX0Jeq0UPxGHtYy4BxN

## UPSTAGE
"""

pip install -qU langchain_upstage

UPSTAGE_API_KEY=""

from langchain_upstage import UpstageLayoutAnalysisLoader

# 파일 경로
file_path = "/content/data/test.pdf"

# Upstage 로더 설정 (페이지 단위 분할)
page_loader = UpstageLayoutAnalysisLoader(
    file_path=file_path,
    output_type="html",           # HTML 형식 출력
    split="page",                 # 페이지 단위 분할
    use_ocr=True,                  # OCR 사용
    exclude=["header", "footer"], # 헤더와 푸터 제외
    api_key=UPSTAGE_API_KEY        # Upstage API 키
)

# 페이지 단위 문서 로드
docs_by_page = page_loader.load()

# 결과 출력 (페이지 단위)
print("Page-level Results:")
for doc in docs_by_page[:3]:
    print(doc.page_content)

# Upstage 로더 설정 (요소 단위 분할)
element_loader = UpstageLayoutAnalysisLoader(
    file_path=file_path,
    output_type="html",           # HTML 형식 출력
    split="element",              # 요소 단위 분할
    use_ocr=True,                  # OCR 사용
    exclude=["header", "footer"], # 헤더와 푸터 제외
    api_key=UPSTAGE_API_KEY        # Upstage API 키
)

# 요소 단위 문서 로드
docs_by_element = element_loader.load()

# 결과 출력 (요소 단위)
print("\nElement-level Results:")
for doc in docs_by_element[:3]:
    print(doc.page_content)

"""## LLAMAPARSER"""

# 설치
!pip install llama-index-core llama-parse llama-index-readers-file python-dotenv

import os
import nest_asyncio
from dotenv import load_dotenv

LLAMA_CLOUD_API_KEY = "llx-0f34HT7KL8ZuKbJRZpizekEpWCLrrIxhLmvcrJd5qgMENkfw"
nest_asyncio.apply()

from llama_parse import LlamaParse
from llama_index.core import SimpleDirectoryReader

# 파서 설정
parser = LlamaParse(
    result_type="markdown",  # "markdown"과 "text" 사용 가능
    num_workers=8,  # worker 수 (기본값: 4)
    verbose=True,
    language="ko",
    api_key=LLAMA_CLOUD_API_KEY,
)

# SimpleDirectoryReader를 사용하여 파일 파싱
file_extractor = {".pdf": parser}

# LlamaParse로 파일 파싱
documents = SimpleDirectoryReader(
    input_files=["/content/data/test.pdf"],
    file_extractor=file_extractor,
).load_data()

from llama_parse import LlamaParse
from llama_index.core import SimpleDirectoryReader

# 파서 설정
parser = LlamaParse(
    result_type="markdown",  # "markdown"과 "text" 사용 가능
    num_workers=8,  # worker 수 (기본값: 4)
    verbose=True,
    language="ko",
    api_key=LLAMA_CLOUD_API_KEY,
)

# SimpleDirectoryReader를 사용하여 파일 파싱
file_extractor = {".pdf": parser}

# LlamaParse로 파일 파싱
documents = SimpleDirectoryReader(
    input_files=["/content/data/test.pdf"],
    file_extractor=file_extractor,
).load_data()

# 페이지 단위 출력
print("Page-level Results:")
for doc in documents:
    page_number = doc.metadata.get("page_number", "Unknown")
    content = getattr(doc, "text", "No text attribute found")  # 안전한 속성 접근
    print(f"Page: {page_number}\n{content}")

# 요소 단위 출력
element_parsing_instruction = (
    "You are parsing a brief of AI Report. Please extract individual text elements, tables, and figures in markdown format."
)
parser.parsing_instruction = element_parsing_instruction

# 요소 단위 재파싱
parsed_elements = [parser.parse(getattr(doc, "text", "")) for doc in documents]

print("\nElement-level Results:")
for elements in parsed_elements:
    for element in elements:
        print(element.content)

from llama_parse import LlamaParse
from llama_index.core import SimpleDirectoryReader

# 파서 설정
parser = LlamaParse(
    result_type="markdown",  # "markdown"과 "text" 사용 가능
    num_workers=8,  # worker 수 (기본값: 4)
    verbose=True,
    language="ko",
    api_key=LLAMA_CLOUD_API_KEY,
)

# SimpleDirectoryReader를 사용하여 파일 파싱
file_extractor = {".pdf": parser}

# LlamaParse로 파일 파싱
documents = SimpleDirectoryReader(
    input_files=["/content/data/test.pdf"],
    file_extractor=file_extractor,
).load_data()

# 페이지 단위 출력
print("Page-level Results:")
for doc in documents:
    page_number = doc.metadata.get("page_number", "Unknown")
    content = getattr(doc, "text", "No text attribute found")  # 안전한 속성 접근
    print(f"Page: {page_number}\n{content}")

# 요소 단위 출력 (마크다운 형식으로 처리)
element_parsing_instruction = (
    "You are parsing a brief of AI Report. Please extract individual text elements, tables, and figures in markdown format."
)

# 요소 단위로 처리하기 위한 로직
parsed_elements = []
for doc in documents:
    content = getattr(doc, "text", "")
    if content:  # 텍스트가 존재하는 경우에만 파싱
        parsed = parser.extract_elements(content, element_parsing_instruction)  # 적절한 메서드 사용
        parsed_elements.append(parsed)

# 결과 출력
print("\nElement-level Results:")
for element in parsed_elements:
    print(element)