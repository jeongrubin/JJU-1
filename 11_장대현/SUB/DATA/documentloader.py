# -*- coding: utf-8 -*-
"""06_00_DocumentLoader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rbcconqoW7O7ZIBuAHsT9D0WrMDVI3eJ

### 사용 문서 링크
- https://spri.kr/posts/view/23669
"""

from langchain_core.documents import Document

document = Document("안녕하세요? 이건 랭체인의 도큐먼드 입니다")

# 도큐먼트의 속성 확인

document.__dict__

# 메타데이터 추가

document.metadata["source"] = "HyeonNote"
document.metadata["page"] = 1
document.metadata["author"] = "장대현"

# 도큐먼트의 속성 확인

document.metadata

"""## Document Loader

- PyPDFLoader: PDF 파일을 로드하는 로더입니다.
- CSVLoader: CSV 파일을 로드하는 로더입니다.
- UnstructuredHTMLLoader: HTML 파일을 로드하는 로더입니다.
- JSONLoader: JSON 파일을 로드하는 로더입니다.
- TextLoader: 텍스트 파일을 로드하는 로더입니다.
- DirectoryLoader: 디렉토리를 로드하는 로더입니다.
- UpstageLoader
- LLaMAIndexLoader
"""

# 예제 파일 경로
FILE_PATH = "/content/SPRI_AI_Brief_2023년12월호_F.pdf"

pip install -qU langchain_community

pip install -qU PyPDF

from langchain_community.document_loaders import PyPDFLoader

# 로더 설정
loader = PyPDFLoader(FILE_PATH)

"""## load()
- 문서를 로드하여 반환합니다.
- 반환된 결과는 `List[Document]` 형태입니다.
"""

# PDF 로더
docs = loader.load()

# 로드된 문서의 수 확인
len(docs)

# 첫번째 문서 확인

docs[0]

"""## load_and_split()
- splitter를 사용하여 문서를 분할하고 반환합니다.
- 반환된 결과는 `List[Document]` 형태입니다.
"""

from langchain_text_splitters import RecursiveCharacterTextSplitter

# 문열 분할기 설정
text_splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=0)

# 문서 분할
split_docs = loader.load_and_split(text_splitter=text_splitter)

# 로드된 문서의 수 확인
print(f"문서의 길이: {len(split_docs)}")

# 첫번째 문서 확인
print(split_docs[0])

"""## lazy_load()
- generator 방식으로 문서를 로드합니다.
"""

loader.lazy_load()

# generator 방식으로 문서 로드
for doc in loader.lazy_load():
    print(doc)
    print('=' * 30)

"""## aload()
- 비동기 (Async) 방식의 문서 로드
"""

# 문서를 async 방식으로 로드
adocs = loader.aload()

# 문서 로드
await adocs
