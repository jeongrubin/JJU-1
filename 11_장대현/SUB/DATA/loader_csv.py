# -*- coding: utf-8 -*-
"""06_03_Loader_csv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cL_CnIOjXKMKzNJ-90TQ1UmT27dkdhi6
"""

import pandas as pd
import numpy as np
import xml.etree.ElementTree as ET
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split


class BostonHousingAnalysis:
    def __init__(self):
        """
        Initialize the class by loading the Boston Housing dataset.
        """
        self.data = None
        self.target = None
        self.features = None
        self.model = None
        self._load_data()

    def _load_data(self):
        """
        Load the Boston Housing dataset from its original source.
        """
        data_url = "http://lib.stat.cmu.edu/datasets/boston"
        raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)

        # Process raw data
        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
        target = raw_df.values[1::2, 2]

        # Column names
        columns = [
            "CRIM", "ZN", "INDUS", "CHAS", "NOX", "RM", "AGE", "DIS", "RAD",
            "TAX", "PTRATIO", "B", "LSTAT"
        ]

        # Create DataFrame
        self.data = pd.DataFrame(data, columns=columns)
        self.data["PRICE"] = target
        self.target = "PRICE"
        self.features = columns

    def save_unstructured_data(self, file_path: str, top_n: int = 10):
        """
        Save the top N rows of the dataset as unstructured text.

        :param file_path: Path to save the unstructured text file.
        :param top_n: Number of rows to save.
        """
        try:
            unstructured_data = self.data.head(top_n).to_string(index=False)
            with open(file_path, "w") as file:
                file.write(unstructured_data)
            print(f"Unstructured data saved to {file_path}")
        except Exception as e:
            print(f"Error saving unstructured data: {e}")

    def save_as_xml(self, file_path: str, top_n: int = 10):
        """
        Save the top N rows of the dataset in XML format.

        :param file_path: Path to save the XML file.
        :param top_n: Number of rows to save.
        """
        try:
            root = ET.Element("BostonHousingData")
            for _, row in self.data.head(top_n).iterrows():
                house = ET.SubElement(root, "House")
                for col, val in row.items():
                    element = ET.SubElement(house, col)
                    element.text = str(val)
            tree = ET.ElementTree(root)
            tree.write(file_path, encoding="utf-8", xml_declaration=True)
            print(f"XML data saved to {file_path}")
        except Exception as e:
            print(f"Error saving XML data: {e}")

    def identify_key_factors(self, top_n: int = 3):
        """
        Perform linear regression to identify key factors influencing house prices.

        :param top_n: Number of top factors to return.
        :return: DataFrame containing top N factors and their coefficients.
        """
        try:
            X = self.data.drop(columns=[self.target])
            y = self.data[self.target]

            # Standardize features
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)

            # Split data
            X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

            # Train regression model
            self.model = LinearRegression()
            self.model.fit(X_train, y_train)

            # Extract coefficients
            coefficients = pd.DataFrame({
                "Feature": self.features,
                "Coefficient": self.model.coef_
            }).sort_values(by="Coefficient", ascending=False)

            # Output top N factors
            top_factors = coefficients.head(top_n)
            print(f"Top {top_n} factors influencing house prices:")
            print(top_factors)
            return top_factors
        except Exception as e:
            print(f"Error identifying key factors: {e}")
            return None


if __name__ == "__main__":
    # Initialize analysis class
    analysis = BostonHousingAnalysis()

    # Save unstructured data
    unstructured_file = "boston_unstructured.txt"
    analysis.save_unstructured_data(file_path=unstructured_file, top_n=10)
    print("\n[Step 1: Unstructured Data]")
    print(f"Unstructured data successfully saved to '{unstructured_file}'.")

    # Save XML data
    xml_file = "boston_top10.xml"
    analysis.save_as_xml(file_path=xml_file, top_n=10)
    print("\n[Step 2: XML Data]")
    print(f"XML data successfully saved to '{xml_file}'.")

    # Identify key factors influencing house prices
    print("\n[Step 3: Key Factors Influencing House Prices]")
    top_factors = analysis.identify_key_factors(top_n=3)

    # Format the output for better readability
    if top_factors is not None:
        print("\nTop 3 factors influencing house prices (sorted by impact):\n")
        for i, row in top_factors.iterrows():
            feature = row["Feature"]
            coefficient = row["Coefficient"]
            print(f"  {i + 1}. Feature: {feature} | Impact Coefficient: {coefficient:.3f}")
